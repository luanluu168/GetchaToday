#!/usr/bin/env node
require('dotenv').config()
const app = require('../app')
const debug = require('debug')('application:server')
const http = require('http')
const { Server } = require('ws')

let port = normalizePort(process.env.PORT || '3000')
app.set('port', port)

const server = http.createServer(app)
const wsServer = (function () {
  return new Server({ server })
})()

wsServer.on('connection', async function connection(ws) {
  ws.onopen = () => {
    console.log('New client connected!')
  }
  ws.onclose = () => {
    console.log('Client disconnected!')
    ws.close()
  }
})

app.set('ws', wsServer)

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

function normalizePort(val) {
  let port = parseInt(val, 10)

  if (isNaN(port)) {
    return val
  }

  if (port >= 0) {
    return port
  }

  return false
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  let bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

function onListening() {
  let addr = server.address()
  let bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
  debug('Listening on ' + bind)
}
